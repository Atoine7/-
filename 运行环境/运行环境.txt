运行环境即浏览器(server端有nodejs)
下载网页代码。渲染出页面，期间会执行若干JS
要保证代码在浏览器中:稳定且高效

页面加载过程
加载过程：
  DNS解析：域名->IP地址
  浏览器根据IP地址向服务器发起http请求
  服务器处理http请求，并返回给浏览器
渲染过程
  根据HTML代码生成DOM Tree
  根据CSS代码生成CSSOM
  将DOM Tree和CSSOM整合形成Render Tree(渲染树)
  根据Render Tree渲染页面
  遇到<script>则暂停渲染，优先加载并执行JS代码，完成再继续
  直至把Render Tree渲染完成

为什么要把css放在head里？
为了防止重复渲染，如果放在body后面，就会出现先渲染出来后再改变样式，同时这也是一种书写规范

为什么建议把js放在body最后？
因为运行<script>时会停止渲染，所以导致页面渲染时间过长

性能优化
原则：
  多使用内存，缓存或其他方法
  减少CPU计算量，减少网络加载耗时
  (适用于所有变成的性能优化--空间换时间)
从何入手
  让加载更快：
    减少资源体积：压缩代码
    减少访问次数：合并代码，SSR服务器端渲染，缓存
  让渲染更快
    CSS放在head，JS放在body最下面
    尽早开始执行JS，用DOMContentLoaded触发
    懒加载(图片懒加载，上滑加载更多)
    对DOM查询进行缓存
    频繁DOM操作，合并到一起插入DOM结构
    节流throttle防抖debounce
缓存
  静态资源加hash后缀，根据文件内容计算hash
  文件内容不变，则hash不变，则url不变
  url和文件不变，则会自动触发http缓存机制，返回304
SSR
  服务器端渲染：将网页和数据一起加载，一起渲染
  非SSR(前后端分离)：先加载网页，再加载数据，再渲染数据

安全
XSS跨站请求攻击
  例子：
  一个博客网站，我发表了一篇博客，其中嵌入<script>脚本
  脚本内容:获取cookie，发送到我的服务器(服务器配合跨域)
  发布这篇博客，有人查看它，我轻松收割访问者的cookie
  预防：
  替换特殊字符，如<变为&lt; >变为&gt;
  <script>变为&lt;script&gt; ,直接显示，而不会作为脚本执行
  前后端都要替换，都做总不会有错
XSRF跨站请求伪造
  例子：
  你正在购物，看中了某个商品，商品id是100
  付费接口是xxx.com/pay?id=100,但没有任何验证
  我是攻击者，我看中了一个商品，id是200
  我向你发送一封电子邮件，邮件标题很吸引人
  但邮件正文隐藏着<img src=xxx.com/pay?id=200/>
  你一看邮件，就帮我购买了id是200的商品
  预防：
  使用post接口
  增加验证，例如密码，短信验证码，指纹等

获取当前页面url参数
  传统方式，查找location.search
  新API,URLSearchParams

RAF requestAnimationFrame
  要想动画流畅，更新频率要60帧/s，即16.67ms更新一次视图
  setTimeout要手动控制频率，而RAF浏览器会自动控制
  后台标签或隐藏iframe中，RAF会暂停，而setTimeout依然执行














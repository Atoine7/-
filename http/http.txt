http状态码

状态码分类
1xx服务器收到请求
2xx请求成功
3xx重定向
4xx客户端错误
5xx服务端错误

常见状态码
200 成功
301 永久重定向(配合location, 浏览器自动处理)
302 临时重定向(配合location, 浏览器自动处理)
304 资源未被修改(去请求服务端，服务端告诉这个资源在本地还有效，不用再请求)
404 资源未找到
403 没有权限
500 服务器错误
504 网关超时

http methods

传统的methods：
get获取服务器的数据
post向服务器提交数据

现在的methods:
get 获取数据
post 新建数据
patch/put 更新数据
delete 删除数据

Restful API
一种新的API设计方法(早已推广使用)
传统API设计：把每个url当做一个功能
Restful API：把每个url当做一个唯一的资源

如何设计成一个资源
1.尽量不用url参数
传统API设计: /api/list?pageIndex=2
Restful API设计：/api/list/2
2.用method表示操作类型
传统
post请求 /api/create-blog
post请求  /api/update-blog?id=100
get请求  /api/get-blog?id=100
restful API设计
post请求  /api/blog
patch请求  /api/blog/100
get请求  /api/blog/100

http headers
常见的Request Headers
Accept浏览器可接收的数据格式
Accept-Encoding浏览器可接收的压缩算法，如gzip
Accept-language浏览器可接收的语言，如zh-CN
Connection：keep-alive一次TCP连接重复使用
cookie 本地信息
Host 访问的网址
User-Agent(简称UA)浏览器信息
Content-type发送数据的格式，如application/json

Response Headers
Content-type 返回数据的格式，如application/json
Content-length 返回数据的大小，多少字节
Content-Encoding返回数据的压缩算法，如gzip
Set-cookie 服务端需要改cookie可以用这个

缓存相关的headers
Cache-Control      Expires
last-Modified      If-Modified-Since
Etag               If-Node-Match

http缓存
含义：把没有必要重新获取的资源不再重新获取
目的：减少网络请求的数量和体积,(网络请求具有不稳定性)让页面加载更快
可以被缓存的：--静态资源(js  css  img)

强制缓存
Cache-Control：
  在Response Headers中
  控制强制缓存的逻辑
  如Cache-Control:max-age=31536000
cache-control的值:
  max-age:设置s级别的缓存的最大过期时间
  no-cache:不用强制缓存，交给服务端处理
  no-store:不用强制缓存，也不用服务端的缓存措施
  private:只允许最终用户做缓存
  public:允许中间的代理，路由等做缓存

协商缓存(对比缓存)
  服务端缓存策略(服务端告诉本地用该用什么缓存，或者缓存是否可用，这次请求的大小肯定就会比较小，没有返回新的资源)
  服务端判断客户端资源，是否和服务端资源一样
  一致则返回304，否则返回200和最新的资源
资源标识
  这Response Headers中，有两种
  Last-Modified资源的最后修改时间
  Etag资源的唯一标识(一个字符串，类似人类的指纹)
  共存时优先使用Etag
  因为last-Modified只能精确到秒级，
  如果资源被重复生成，而内容不变，则Etag更精确

三种刷新操作
正常操作：地址栏输入url，跳转链接，前进后退等
手动刷新：F5，点击刷新按钮，右击菜单刷新
强制刷新：ctrl + F5
不同刷新操作，不同的缓存策略
正常刷新：强制缓存有效，协商缓存有效
手动刷新：强制缓存失效，协商缓存有效
强制刷新：强制缓存失效，协商缓存失效




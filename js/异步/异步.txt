单线程和异步
JS是单线程语言，只能同时做一件事儿
浏览器和nodejs已支持js启动进程，如Web Worker
JS和DOM渲染公用同一个进程，因为JS可修改DOM结构
异步不会阻塞代码执行
同步会阻塞代码执行

应用场景
网络请求，如ajax图片加载
定时任务，如setTimeout


event loop(事件循环/事件轮询)
event loop就是异步回调的实现原理
js执行中同步代码执行完，再执行异步

总结event loop过程
1.同步代码，一行一行放在Call Stack执行
  遇到异步，会先"记录"下，等待时机(定时，网络请求等)
  时机到了，就移动到Callback Queue
2.如Call Stack为空(即同步代码执行完)Event Loop开始工作
  轮询查找Callback Queue,如有则移动到Call Stack执行
  然后继续轮询查找(永动机一样)

异步(setTimeout, ajax)使用回调,基于event loop
DOM事件也使用回调，基于event loop，但是DOM事件不属于异步

promise
三种状态:pending, resolved, rejected
pending->resolved或pending->rejected
变化不可逆
pending状态，不会触发then和catch
resolve状态，会触发后续的then回调函数
rejected状态，会触发后续的catch回调函数

then和catch改变状态
then正常返回resolved，里面有报错则返回rejected
catch正常返回resolved，里面有报错则返回rejected
Promise then catch链式调用，但也是基于回调函数

async/await是同步语法，彻底消灭回调函数













